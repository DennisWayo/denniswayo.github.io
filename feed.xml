<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.3.3">Jekyll</generator><link href="https://denniswayo.github.io/feed.xml" rel="self" type="application/atom+xml"/><link href="https://denniswayo.github.io/" rel="alternate" type="text/html" hreflang="en"/><updated>2024-08-26T16:15:41+00:00</updated><id>https://denniswayo.github.io/feed.xml</id><title type="html">blank</title><subtitle>Hey there! Welcome to my quantum world. </subtitle><entry><title type="html">Fabricating Photonic and Superconducting Qubits</title><link href="https://denniswayo.github.io/blog/2024/qubits/" rel="alternate" type="text/html" title="Fabricating Photonic and Superconducting Qubits"/><published>2024-08-22T16:40:16+00:00</published><updated>2024-08-22T16:40:16+00:00</updated><id>https://denniswayo.github.io/blog/2024/qubits</id><content type="html" xml:base="https://denniswayo.github.io/blog/2024/qubits/"><![CDATA[<p>Fabricating qubits, particularly in a research or laboratory setting, is a complex process that involves advanced materials science, nanofabrication, and quantum engineering.</p> <ol> <li><strong>Superconducting Qubits</strong> Superconducting qubits, such as transmon qubits, are one of the most widely used types of qubits due to their compatibility with existing semiconductor fabrication techniques. Here’s a simplified process: A. <strong>Material Preparation</strong> - <strong>Superconducting Material</strong>: Typically, niobium (Nb) or aluminum (Al) is used because they exhibit superconductivity at low temperatures. <ul> <li><strong>Substrate</strong>: A clean and flat substrate like silicon (Si) or sapphire (Al₂O₃) is prepared, as it provides an excellent base for depositing superconducting materials. B. <strong>Deposition of Superconducting Material</strong></li> <li><strong>Thin Film Deposition</strong>: The superconducting material is deposited onto the substrate using techniques like sputtering or evaporation. A thin layer (usually in the range of nanometers) is created. C. <strong>Patterning</strong></li> <li><strong>Photolithography</strong>: A light-sensitive resist is applied to the surface, and a pattern is etched onto the superconducting layer using UV light through a mask.</li> <li><strong>Electron Beam Lithography (for smaller features)</strong>: For finer patterns, electron beam lithography is used to write the desired structures directly onto the resist. D. <strong>Etching</strong></li> <li><strong>Reactive Ion Etching (RIE)</strong>: The exposed areas of the superconducting film are removed, leaving behind the desired qubit pattern (e.g., Josephson junctions, capacitors, inductors).</li> <li><strong>Lift-Off Process</strong>: The remaining resist is removed, leaving only the patterned superconducting material on the substrate. E. <strong>Josephson Junction Fabrication</strong></li> <li><strong>Double Layer Deposition</strong>: To create the Josephson junction, a thin insulating barrier (typically aluminum oxide) is formed between two layers of superconducting material.</li> <li><strong>Oxidation</strong>: The bottom layer is oxidized to form the insulating barrier, and then the top layer is deposited to complete the junction. F. <strong>Testing and Packaging</strong></li> <li><strong>Cryogenic Testing</strong>: The qubits are cooled to millikelvin temperatures using dilution refrigerators and tested for coherence times, frequency, and other quantum properties.</li> <li><strong>Packaging</strong>: The qubits are packaged with necessary readout and control circuitry, ready for integration into a quantum processor.</li> </ul> </li> <li><strong>Photonic Qubit</strong> Fabricating photonic qubits involves creating structures that can generate, manipulate, and detect single photons, which are used as the carriers of quantum information. Photonic qubits are particularly attractive because they are less prone to decoherence and can be transmitted over long distances, making them ideal for quantum communication and certain types of quantum computing. Here’s a simplified overview of the fabrication process for photonic qubits: A. <strong>Material Selection</strong> <ul> <li><strong>Silicon</strong>: Commonly used due to its mature fabrication process and compatibility with CMOS technology.</li> <li><strong>Silicon Nitride (SiN)</strong>: Often used for integrated photonics because of its low optical loss and wide transparency range.</li> <li><strong>III-V Semiconductors</strong>: Materials like Gallium Arsenide (GaAs) are used for single-photon sources, such as quantum dots.</li> <li><strong>Lithium Niobate (LiNbO₃)</strong>: Used for electro-optic modulators due to its excellent electro-optic properties. B. <strong>Photon Source Fabrication</strong> Photonic qubits often require single-photon sources. There are several methods to create these sources: <ol> <li><strong>Quantum Dots</strong> <ul> <li><strong>Material Growth</strong>: Quantum dots are typically fabricated using molecular beam epitaxy (MBE) or metal-organic chemical vapor deposition (MOCVD). These methods allow for the precise growth of quantum dots within a semiconductor matrix.</li> <li><strong>Isolation</strong>: Quantum dots are isolated to ensure that they emit single photons when excited.</li> <li><strong>Integration</strong>: These quantum dots can be integrated into photonic circuits or cavities to enhance photon extraction efficiency.</li> </ul> </li> <li><strong>Spontaneous Parametric Down-Conversion (SPDC)</strong> <ul> <li><strong>Nonlinear Crystals</strong>: Photons can be generated using nonlinear optical crystals (e.g., beta barium borate, BBO) through a process called spontaneous parametric down-conversion, where a single photon splits into two lower-energy photons.</li> <li><strong>Waveguides</strong>: The crystals are often integrated into waveguides or resonators on a chip to enhance photon pair generation. C. <strong>Waveguide Fabrication</strong> Photonic circuits use waveguides to guide photons between different components. These are typically fabricated as follows:</li> </ul> </li> <li><strong>Photolithography</strong> <ul> <li><strong>Patterning</strong>: A photoresist is applied to a silicon or silicon nitride wafer, and the waveguide pattern is defined using UV light through a mask.</li> <li><strong>Etching</strong>: The exposed areas are etched away using reactive ion etching (RIE), leaving behind the waveguide structures.</li> <li><strong>Cladding</strong>: An additional layer of cladding material is deposited to protect the waveguides and confine the light.</li> </ul> </li> <li><strong>Direct Laser Writing</strong> - <strong>Femtosecond Laser Pulses</strong>: For more complex 3D structures, direct laser writing is used. A femtosecond laser is focused inside a transparent material to create waveguides by modifying the refractive index in a precise pattern. D. <strong>Modulators and Detectors</strong></li> <li><strong>Electro-Optic Modulators</strong> <ul> <li><strong>Material Choice</strong>: Lithium niobate or silicon can be used to fabricate modulators that control the phase and amplitude of the light.</li> <li><strong>Fabrication</strong>: Modulators are patterned using photolithography and etched to form the required structures. Electrodes are added to apply the electric fields needed for modulation.</li> </ul> </li> <li><strong>Single-Photon Detectors</strong> <ul> <li><strong>Superconducting Nanowire Single-Photon Detectors (SNSPDs)</strong>: These are made by depositing a thin layer of superconducting material (e.g., niobium nitride) on a substrate and then patterning it into nanowires using electron beam lithography and etching.</li> <li><strong>Avalanche Photodiodes (APDs)</strong>: Semiconductor-based detectors that can detect single photons by amplifying the signal in an avalanche breakdown process. They are fabricated using standard semiconductor techniques. E. <strong>Integration and Testing</strong></li> <li><strong>Hybrid Integration</strong>: Photonic components like quantum dots, waveguides, modulators, and detectors can be integrated on a single chip, using techniques like bonding or flip-chip assembly.</li> <li><strong>Testing</strong>: The fabricated photonic qubits and circuits are tested using laser sources to inject photons and detectors to measure the output. Quantum properties such as coherence, entanglement, and fidelity are analyzed. F. <strong>Packaging</strong></li> <li><strong>Optical Coupling</strong>: The chip is packaged with optical fibers or grating couplers to allow efficient coupling of light into and out of the photonic circuit.</li> <li><strong>Thermal Management</strong>: Photonic circuits often require temperature stabilization, so the package includes thermal control elements.</li> </ul> </li> </ol> </li> </ul> </li> <li><strong>Trapped Ion Qubits</strong> Trapped ion qubits are created by trapping and manipulating individual ions using electromagnetic fields. Here’s a simplified process: A. <strong>Ion Trap Fabrication</strong> <ul> <li><strong>Electrode Design</strong>: Electrode structures are designed to create an electromagnetic field that traps ions in a specific location in space.</li> <li><strong>Material Choice</strong>: Electrodes are typically made of metals like gold (Au) or aluminum (Al).</li> <li><strong>Substrate Preparation</strong>: A substrate, often made of silicon or quartz, is prepared. B. <strong>Electrode Fabrication</strong></li> <li><strong>Thin Film Deposition</strong>: A metal layer is deposited onto the substrate.</li> <li><strong>Patterning</strong>: The electrodes are patterned using photolithography or electron beam lithography.</li> <li><strong>Etching</strong>: Excess metal is removed to leave the patterned electrodes. C. <strong>Ion Loading</strong></li> <li><strong>Laser Cooling</strong>: The chosen ion (e.g., (^{40}Ca^+) or (^{171}Yb^+)) is cooled using laser beams to reduce its motion.</li> <li><strong>Trapping</strong>: The ion is trapped using the electromagnetic fields generated by the electrodes. D. <strong>Manipulation and Readout</strong></li> <li><strong>Laser Control</strong>: Qubit states are manipulated using precisely tuned laser pulses.</li> <li><strong>Fluorescence Detection</strong>: The state of the qubit is read out by detecting the fluorescence emitted when the ion interacts with the</li> </ul> </li> </ol>]]></content><author><name></name></author><category term="sample-posts"/><category term="formatting"/><category term="links"/><summary type="html"><![CDATA[Qubits]]></summary></entry><entry><title type="html">Google Gemini updates: Flash 1.5, Gemma 2 and Project Astra</title><link href="https://denniswayo.github.io/blog/2024/google-gemini-updates-flash-15-gemma-2-and-project-astra/" rel="alternate" type="text/html" title="Google Gemini updates: Flash 1.5, Gemma 2 and Project Astra"/><published>2024-05-14T00:00:00+00:00</published><updated>2024-05-14T00:00:00+00:00</updated><id>https://denniswayo.github.io/blog/2024/google-gemini-updates-flash-15-gemma-2-and-project-astra</id><content type="html" xml:base="https://denniswayo.github.io/blog/2024/google-gemini-updates-flash-15-gemma-2-and-project-astra/"><![CDATA[]]></content><author><name></name></author><summary type="html"><![CDATA[We’re sharing updates across our Gemini family of models and a glimpse of Project Astra, our vision for the future of AI assistants.]]></summary></entry><entry><title type="html">a post with tabs</title><link href="https://denniswayo.github.io/blog/2024/tabs/" rel="alternate" type="text/html" title="a post with tabs"/><published>2024-05-01T00:32:13+00:00</published><updated>2024-05-01T00:32:13+00:00</updated><id>https://denniswayo.github.io/blog/2024/tabs</id><content type="html" xml:base="https://denniswayo.github.io/blog/2024/tabs/"><![CDATA[<p>This is how a post with <a href="https://github.com/Ovski4/jekyll-tabs">tabs</a> looks like. Note that the tabs could be used for different purposes, not only for code.</p> <h2 id="first-tabs">First tabs</h2> <p>To add tabs, use the following syntax:</p> <div class="language-liquid highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">{%</span><span class="w"> </span><span class="nt">tabs</span><span class="w"> </span><span class="nv">group-name</span><span class="w"> </span><span class="cp">%}</span>

<span class="cp">{%</span><span class="w"> </span><span class="nt">tab</span><span class="w"> </span><span class="nv">group-name</span><span class="w"> </span><span class="nv">tab-name-1</span><span class="w"> </span><span class="cp">%}</span>

Content 1

<span class="cp">{%</span><span class="w"> </span><span class="nt">endtab</span><span class="w"> </span><span class="cp">%}</span>

<span class="cp">{%</span><span class="w"> </span><span class="nt">tab</span><span class="w"> </span><span class="nv">group-name</span><span class="w"> </span><span class="nv">tab-name-2</span><span class="w"> </span><span class="cp">%}</span>

Content 2

<span class="cp">{%</span><span class="w"> </span><span class="nt">endtab</span><span class="w"> </span><span class="cp">%}</span>

<span class="cp">{%</span><span class="w"> </span><span class="nt">endtabs</span><span class="w"> </span><span class="cp">%}</span>
</code></pre></div></div> <p>With this you can generate visualizations like:</p> <ul id="log" class="tab" data-tab="45ce2355-0dd3-4284-b837-88c5e2369830" data-name="log"> <li class="active" id="log-php"> <a href="#">php </a> </li> <li id="log-js"> <a href="#">js </a> </li> <li id="log-ruby"> <a href="#">ruby </a> </li> </ul> <ul class="tab-content" id="45ce2355-0dd3-4284-b837-88c5e2369830" data-name="log"> <li class="active"> <div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">var_dump</span><span class="p">(</span><span class="s1">'hello'</span><span class="p">);</span>
</code></pre></div></div> </li> <li> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">hello</span><span class="dl">"</span><span class="p">);</span>
</code></pre></div></div> </li> <li> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">pputs</span> <span class="dl">'</span><span class="s1">hello</span><span class="dl">'</span>
</code></pre></div></div> </li> </ul> <h2 id="another-example">Another example</h2> <ul id="data-struct" class="tab" data-tab="c3d93814-f71c-450d-a93e-dd8d429cbf4e" data-name="data-struct"> <li class="active" id="data-struct-yaml"> <a href="#">yaml </a> </li> <li id="data-struct-json"> <a href="#">json </a> </li> </ul> <ul class="tab-content" id="c3d93814-f71c-450d-a93e-dd8d429cbf4e" data-name="data-struct"> <li class="active"> <div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">hello</span><span class="pi">:</span>
  <span class="pi">-</span> <span class="s2">"</span><span class="s">whatsup"</span>
  <span class="pi">-</span> <span class="s2">"</span><span class="s">hi"</span>
</code></pre></div></div> </li> <li> <div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
  </span><span class="nl">"hello"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="s2">"whatsup"</span><span class="p">,</span><span class="w"> </span><span class="s2">"hi"</span><span class="p">]</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div> </li> </ul> <h2 id="tabs-for-something-else">Tabs for something else</h2> <ul id="something-else" class="tab" data-tab="e07cb64b-be9f-4f50-8241-2f4a89aa48bb" data-name="something-else"> <li class="active" id="something-else-text"> <a href="#">text </a> </li> <li id="something-else-quote"> <a href="#">quote </a> </li> <li id="something-else-list"> <a href="#">list </a> </li> </ul> <ul class="tab-content" id="e07cb64b-be9f-4f50-8241-2f4a89aa48bb" data-name="something-else"> <li class="active"> <p>Regular text</p> </li> <li> <blockquote> <p>A quote</p> </blockquote> </li> <li> <p>Hipster list</p> <ul> <li>brunch</li> <li>fixie</li> <li>raybans</li> <li>messenger bag</li> </ul> </li> </ul>]]></content><author><name></name></author><category term="sample-posts"/><category term="formatting"/><category term="code"/><summary type="html"><![CDATA[this is what included tabs in a post could look like]]></summary></entry><entry><title type="html">a post with typograms</title><link href="https://denniswayo.github.io/blog/2024/typograms/" rel="alternate" type="text/html" title="a post with typograms"/><published>2024-04-29T23:36:10+00:00</published><updated>2024-04-29T23:36:10+00:00</updated><id>https://denniswayo.github.io/blog/2024/typograms</id><content type="html" xml:base="https://denniswayo.github.io/blog/2024/typograms/"><![CDATA[<p>This is an example post with some <a href="https://github.com/google/typograms/">typograms</a> code.</p> <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">```</span><span class="nl">typograms
</span><span class="sb">+----+
|    |---&gt; My first diagram!
+----+</span>
<span class="p">```</span>
</code></pre></div></div> <p>Which generates:</p> <pre><code class="language-typograms">+----+
|    |---&gt; My first diagram!
+----+
</code></pre> <p>Another example:</p> <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">```</span><span class="nl">typograms
</span><span class="sb">.------------------------.
|.----------------------.|
||"https://example.com" ||
|'----------------------'|
| ______________________ |
||                      ||
||   Welcome!           ||
||                      ||
||                      ||
||  .----------------.  ||
||  | username       |  ||
||  '----------------'  ||
||  .----------------.  ||
||  |"*******"       |  ||
||  '----------------'  ||
||                      ||
||  .----------------.  ||
||  |   "Sign-up"    |  ||
||  '----------------'  ||
||                      ||
|+----------------------+|
.------------------------.</span>
<span class="p">```</span>
</code></pre></div></div> <p>which generates:</p> <pre><code class="language-typograms">.------------------------.
|.----------------------.|
||"https://example.com" ||
|'----------------------'|
| ______________________ |
||                      ||
||   Welcome!           ||
||                      ||
||                      ||
||  .----------------.  ||
||  | username       |  ||
||  '----------------'  ||
||  .----------------.  ||
||  |"*******"       |  ||
||  '----------------'  ||
||                      ||
||  .----------------.  ||
||  |   "Sign-up"    |  ||
||  '----------------'  ||
||                      ||
|+----------------------+|
.------------------------.
</code></pre> <p>For more examples, check out the <a href="https://google.github.io/typograms/#examples">typograms documentation</a>.</p>]]></content><author><name></name></author><category term="sample-posts"/><category term="formatting"/><category term="diagrams"/><summary type="html"><![CDATA[this is what included typograms code could look like]]></summary></entry><entry><title type="html">a post that can be cited</title><link href="https://denniswayo.github.io/blog/2024/post-citation/" rel="alternate" type="text/html" title="a post that can be cited"/><published>2024-04-28T15:06:00+00:00</published><updated>2024-04-28T15:06:00+00:00</updated><id>https://denniswayo.github.io/blog/2024/post-citation</id><content type="html" xml:base="https://denniswayo.github.io/blog/2024/post-citation/"><![CDATA[<p>This is an example post that can be cited. The content of the post ends here, while the citation information is automatically provided below. The only thing needed is for you to set the <code class="language-plaintext highlighter-rouge">citation</code> key in the front matter to <code class="language-plaintext highlighter-rouge">true</code>.</p>]]></content><author><name></name></author><category term="sample-posts"/><category term="formatting"/><category term="citation"/><summary type="html"><![CDATA[this is what a post that can be cited looks like]]></summary></entry><entry><title type="html">a post with pseudo code</title><link href="https://denniswayo.github.io/blog/2024/pseudocode/" rel="alternate" type="text/html" title="a post with pseudo code"/><published>2024-04-15T00:01:00+00:00</published><updated>2024-04-15T00:01:00+00:00</updated><id>https://denniswayo.github.io/blog/2024/pseudocode</id><content type="html" xml:base="https://denniswayo.github.io/blog/2024/pseudocode/"><![CDATA[<p>This is an example post with some pseudo code rendered by <a href="https://github.com/SaswatPadhi/pseudocode.js">pseudocode</a>. The example presented here is the same as the one in the <a href="https://saswat.padhi.me/pseudocode.js/">pseudocode.js</a> documentation, with only one simple but important change: everytime you would use <code class="language-plaintext highlighter-rouge">$</code>, you should use <code class="language-plaintext highlighter-rouge">$$</code> instead. Also, note that the <code class="language-plaintext highlighter-rouge">pseudocode</code> key in the front matter is set to <code class="language-plaintext highlighter-rouge">true</code> to enable the rendering of pseudo code. As an example, using this code:</p> <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">```</span><span class="nl">pseudocode
</span><span class="sb">% This quicksort algorithm is extracted from Chapter 7, Introduction to Algorithms (3rd edition)
\begin{algorithm}
\caption{Quicksort}
\begin{algorithmic}
\PROCEDURE{Quicksort}{$$A, p, r$$}
    \IF{$$p &lt; r$$}
        \STATE $$q = $$ \CALL{Partition}{$$A, p, r$$}
        \STATE \CALL{Quicksort}{$$A, p, q - 1$$}
        \STATE \CALL{Quicksort}{$$A, q + 1, r$$}
    \ENDIF
\ENDPROCEDURE
\PROCEDURE{Partition}{$$A, p, r$$}
    \STATE $$x = A[r]$$
    \STATE $$i = p - 1$$
    \FOR{$$j = p$$ \TO $$r - 1$$}
        \IF{$$A[j] &lt; x$$}
            \STATE $$i = i + 1$$
            \STATE exchange
            $$A[i]$$ with $$A[j]$$
        \ENDIF
        \STATE exchange $$A[i]$$ with $$A[r]$$
    \ENDFOR
\ENDPROCEDURE
\end{algorithmic}
\end{algorithm}</span>
<span class="p">```</span>
</code></pre></div></div> <p>Generates:</p> <pre><code class="language-pseudocode">% This quicksort algorithm is extracted from Chapter 7, Introduction to Algorithms (3rd edition)
\begin{algorithm}
\caption{Quicksort}
\begin{algorithmic}
\PROCEDURE{Quicksort}{$$A, p, r$$}
    \IF{$$p &lt; r$$}
        \STATE $$q = $$ \CALL{Partition}{$$A, p, r$$}
        \STATE \CALL{Quicksort}{$$A, p, q - 1$$}
        \STATE \CALL{Quicksort}{$$A, q + 1, r$$}
    \ENDIF
\ENDPROCEDURE
\PROCEDURE{Partition}{$$A, p, r$$}
    \STATE $$x = A[r]$$
    \STATE $$i = p - 1$$
    \FOR{$$j = p$$ \TO $$r - 1$$}
        \IF{$$A[j] &lt; x$$}
            \STATE $$i = i + 1$$
            \STATE exchange
            $$A[i]$$ with $$A[j]$$
        \ENDIF
        \STATE exchange $$A[i]$$ with $$A[r]$$
    \ENDFOR
\ENDPROCEDURE
\end{algorithmic}
\end{algorithm}
</code></pre>]]></content><author><name></name></author><category term="sample-posts"/><category term="formatting"/><category term="code"/><summary type="html"><![CDATA[this is what included pseudo code could look like]]></summary></entry><entry><title type="html">Displaying External Posts on Your al-folio Blog</title><link href="https://denniswayo.github.io/blog/2022/displaying-external-posts-on-your-al-folio-blog/" rel="alternate" type="text/html" title="Displaying External Posts on Your al-folio Blog"/><published>2022-04-23T23:20:09+00:00</published><updated>2022-04-23T23:20:09+00:00</updated><id>https://denniswayo.github.io/blog/2022/displaying-external-posts-on-your-al-folio-blog</id><content type="html" xml:base="https://denniswayo.github.io/blog/2022/displaying-external-posts-on-your-al-folio-blog/"><![CDATA[]]></content><author><name></name></author></entry><entry><title type="html">a post with math</title><link href="https://denniswayo.github.io/blog/2015/Quantum1/" rel="alternate" type="text/html" title="a post with math"/><published>2015-10-20T15:12:00+00:00</published><updated>2015-10-20T15:12:00+00:00</updated><id>https://denniswayo.github.io/blog/2015/Quantum1</id><content type="html" xml:base="https://denniswayo.github.io/blog/2015/Quantum1/"><![CDATA[<p>Hey Dennis can you see this?</p>]]></content><author><name></name></author><category term="sample-posts"/><category term="formatting"/><summary type="html"><![CDATA[Qubits to Algorithms]]></summary></entry></feed>